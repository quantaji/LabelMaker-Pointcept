import argparse
import os
import shutil
from pathlib import Path

test_set_video_id = [
    41069051,
    42899723,
    47430490,
    47334254,
    47332000,
    42899712,
    48018345,
    47332905,
    47331971,
    47204609,
    47429975,
    42898554,
    47430002,
    48018957,
    47331265,
    45260857,
    47115452,
    41159529,
    48018382,
    42898519,
    47430005,
    47331668,
    47895556,
    42446156,
    41142278,
    47895365,
    45261615,
    42898497,
    48018566,
    47331262,
    47332908,
    42899619,
    42899700,
    45260920,
    42446536,
    45261182,
    47331963,
    48458489,
    45662983,
    47332910,
    41254425,
    47430048,
    42445998,
    42899680,
    45663165,
    47430024,
    47115529,
    41254435,
    47331339,
    47430007,
    42446104,
    42897559,
    48018358,
    41159538,
    48018386,
    42898570,
    47115463,
    47334241,
    44358436,
    47332885,
    47333932,
    47332005,
    42898869,
    47429913,
    45260899,
    48458481,
    47895547,
    41125722,
    47332890,
    47332886,
    47115548,
    45260854,
    45261619,
    47430034,
    47895371,
    47331661,
    45261179,
    47331337,
    48018361,
    41069043,
    48018360,
    42445029,
    41159555,
    47895542,
    48018732,
    47333920,
    42898521,
    41159553,
    42446083,
    48018381,
    44358532,
    47331964,
    44358583,
    47333452,
    42899620,
    47331331,
    48458663,
    48018368,
    47204573,
    42445988,
    42444953,
    42897508,
    47895777,
    47333436,
    42899691,
    47895341,
    45663149,
    47895743,
    47204554,
    42897528,
    42444950,
    42897566,
    47331061,
    47331654,
    41254432,
    47895782,
    47331311,
    42446532,
    47331644,
    41254269,
    47204552,
    47430038,
    45663113,
    47331336,
    47334239,
    41125709,
    47333925,
    41254405,
    41159571,
    42898817,
    42897552,
    48458660,
    47895355,
    48018956,
    41142281,
    42897696,
    45261129,
    47895367,
    45662975,
    47204566,
    47333923,
    47115526,
    42446049,
    44358538,
    47895348,
    42897695,
    42898822,
    42899613,
    47333431,
    47334103,
    45261133,
    48018375,
    48018739,
    48458428,
    42897599,
    45662924,
    42898486,
    48458732,
    47895554,
    48458415,
    42899698,
    42898862,
    42445991,
    47333924,
    47331653,
    47331990,
    47204575,
    42445021,
    47429992,
    47430475,
    48018960,
    45261575,
    47334368,
    42446527,
    47429995,
    42445448,
    42898574,
    48018559,
    47895779,
    45261631,
    47115543,
    41069021,
    45663175,
    47430023,
    47895745,
    48018970,
    47331646,
    42899612,
    42446100,
    47334256,
    47334091,
    48018367,
    41159530,
    42446165,
    42899461,
    48458473,
    47429925,
    47331989,
    45662926,
    47895783,
    42446546,
    45662987,
    47334361,
    47430422,
    42446103,
    45261144,
    47895374,
    47430479,
    47895735,
    42446093,
    41159525,
    45662970,
    47430471,
    47332899,
    47204607,
    42898538,
    47331069,
    45260900,
    42444949,
    45261588,
    42899734,
    42898811,
    47115460,
    41254441,
    45662944,
    41254412,
    47895740,
    42444976,
    48458652,
    48018346,
    47430483,
    48458427,
    42899611,
    42445966,
    47332901,
    41254400,
    42899471,
    41254398,
    47430051,
    47334379,
    47429922,
    47332916,
    44358452,
    41159541,
    45260898,
    48018741,
    47430043,
    45261143,
    42897550,
    41159557,
    47430026,
    44358499,
    47331319,
    45261594,
    42446137,
    45662942,
    42897678,
    42445429,
    48458735,
    42444946,
    47331334,
    41125760,
    47334110,
    44358446,
    41159519,
    47331071,
    47334380,
    41159534,
    48458472,
    47115474,
    42898818,
    47429998,
    48018966,
    42446079,
]

val_set_video_id = [
    42898854,
    47895357,
    47204563,
    42897564,
    47430045,
    47333441,
    47331988,
    47331324,
    41069042,
    48458657,
    42446533,
    42446167,
    47430424,
    47429987,
    41254402,
    48458484,
    42446016,
    44358515,
    42898544,
    44358498,
    45261128,
    48018737,
    47331972,
    47895549,
    45663114,
    47895750,
    47334115,
    42899729,
    48018972,
    45663105,
    41069048,
    47334093,
    47333937,
    48458424,
    47333931,
    45663150,
    44358505,
    41159572,
    42899736,
    47334240,
    47334120,
    42444966,
    48018572,
    47895536,
    42445031,
    42446056,
    47333435,
    47430419,
    42899725,
    47333916,
    47895738,
    48458656,
    47333898,
    45261587,
    47332895,
    44358513,
    42445981,
    48018560,
    41159566,
    42899726,
    42897521,
    45261181,
    47895771,
    41254386,
    45261193,
    47333918,
    47895353,
    42444955,
    44358536,
    44358440,
    47334107,
    42446114,
    47334381,
    47334372,
    42445022,
    42445026,
    47895732,
    42446541,
    47430001,
    42899699,
    47204578,
    42897629,
    47331974,
    48458650,
    47430489,
    42899694,
    44358451,
    47429977,
    47430033,
    47334252,
    42899617,
    41142280,
    41069025,
    48458747,
    44358435,
    45260928,
    42446517,
    41254382,
    47429906,
    41125700,
    47334238,
    47333904,
    47334117,
    42899731,
    42897688,
    47333443,
    47331063,
    47895739,
    42445028,
    47429914,
    47430036,
    42897504,
    48458654,
    45261150,
    47331266,
    47429971,
    42898816,
    47895552,
    42446151,
    42898867,
    47331970,
    45261185,
    48458647,
    48458430,
    42899688,
    42897672,
    47115469,
    41159504,
    42899720,
    47115550,
    45662981,
    47204605,
    47334102,
    47332911,
    47895350,
    41254246,
    47115473,
    42897501,
    44358518,
    45261637,
    47332915,
    41125756,
    47429912,
    45662943,
    45663164,
    44358448,
    45261140,
    48018962,
    47331322,
    47332893,
    47204556,
    41254262,
    47333457,
    45663107,
    42445984,
    42897647,
    42444954,
    48018372,
    44358584,
    42898508,
    42444968,
    47204559,
    42446163,
    42897526,
    42446529,
    45260903,
    47895541,
    47333940,
    42446038,
    47334237,
    41069050,
    45261620,
    42897542,
    42899679,
    42446519,
    47331645,
    45663115,
    41159540,
    47895364,
    47331064,
    42897538,
    45260856,
    48018353,
    42898868,
    42897554,
    45260905,
    41159558,
    47430003,
    41125696,
    47333934,
    42899739,
    48018379,
    45663099,
    42898826,
    41069046,
    47334362,
    45662979,
    44358442,
    47331333,
    47895776,
    44358582,
    42897692,
    47430485,
    42897651,
    47333440,
    47334109,
    42445441,
    42899690,
    48018356,
    42897561,
    44358455,
    47331314,
    41125718,
    42446522,
    48458417,
    47430468,
    47331068,
    47115525,
    47430470,
    47334367,
    42897545,
    42446540,
    45261190,
    41159503,
    42899696,
    47332004,
    48458665,
    47895736,
    45260914,
    42446535,
    45260925,
    47333899,
    48458667,
    47333927,
    48018562,
    48018387,
    47334096,
    42899717,
    45663154,
    47332918,
    42898581,
    42897549,
    48018347,
    47331316,
    47331662,
    47895534,
    48018571,
    45261121,
    42899459,
    45261142,
    47333456,
    41159508,
    42898527,
    47334360,
    45261632,
    47430047,
    42899714,
    42897541,
    47334234,
    42446116,
    41125731,
    42899685,
    45662921,
    47332904,
    47429904,
    42897667,
    45261581,
    42899737,
    48018730,
    47334105,
    47331651,
    48458456,
    48458465,
    41125763,
]

# NOTE: the wasserstein distances are
# total v.s. test 0.3419281643774335
# total v.s. val 0.3675429390706121
# test v.s. val 0.07816056523166232


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--data_root",
        required=True,
        help="Path to the alc's ptv3 processed data root",
    )
    config = parser.parse_args()

    data_root = Path(config.data_root)

    custom_test_dir = data_root / "custom_test"
    if custom_test_dir.exists():
        shutil.rmtree(str(custom_test_dir))
    custom_test_dir.mkdir(exist_ok=False, parents=True)

    custom_val_dir = data_root / "custom_val"
    if custom_val_dir.exists():
        shutil.rmtree(str(custom_val_dir))
    custom_val_dir.mkdir(exist_ok=False, parents=True)

    for video_id in test_set_video_id:
        src_path = data_root / f"val/{video_id}.pth"

        tgt_path = custom_test_dir / f"{video_id}.pth"

        os.symlink(
            os.path.relpath(
                src_path,
                tgt_path.parent,
            ),
            tgt_path,
        )

    for video_id in val_set_video_id:
        src_path = data_root / f"val/{video_id}.pth"
        tgt_path = custom_val_dir / f"{video_id}.pth"

        os.symlink(
            os.path.relpath(
                src_path,
                tgt_path.parent,
            ),
            tgt_path,
        )


if __name__ == "__main__":
    main()
