import argparse
import glob
import json
import multiprocessing as mp
import os
import warnings
from concurrent.futures import ProcessPoolExecutor
from itertools import repeat
from pathlib import Path

import numpy as np
import open3d as o3d
import plyfile
import torch
from tqdm import tqdm

SCANNETPP_NAMES = [
    "wall",
    "ceiling",
    "floor",
    "table",
    "door",
    "ceiling lamp",
    "cabinet",
    "blinds",
    "curtain",
    "chair",
    "storage cabinet",
    "office chair",
    "bookshelf",
    "whiteboard",
    "window",
    "box",
    "window frame",
    "monitor",
    "shelf",
    "doorframe",
    "pipe",
    "heater",
    "kitchen cabinet",
    "sofa",
    "windowsill",
    "bed",
    "shower wall",
    "trash can",
    "book",
    "plant",
    "blanket",
    "tv",
    "computer tower",
    "kitchen counter",
    "refrigerator",
    "jacket",
    "electrical duct",
    "sink",
    "bag",
    "picture",
    "pillow",
    "towel",
    "suitcase",
    "backpack",
    "crate",
    "keyboard",
    "rack",
    "toilet",
    "paper",
    "printer",
    "poster",
    "painting",
    "microwave",
    "board",
    "shoes",
    "socket",
    "bottle",
    "bucket",
    "cushion",
    "basket",
    "shoe rack",
    "telephone",
    "file folder",
    "cloth",
    "blind rail",
    "laptop",
    "plant pot",
    "exhaust fan",
    "cup",
    "coat hanger",
    "light switch",
    "speaker",
    "table lamp",
    "air vent",
    "clothes hanger",
    "kettle",
    "smoke detector",
    "container",
    "power strip",
    "slippers",
    "paper bag",
    "mouse",
    "cutting board",
    "toilet paper",
    "paper towel",
    "pot",
    "clock",
    "pan",
    "tap",
    "jar",
    "soap dispenser",
    "binder",
    "bowl",
    "tissue box",
    "whiteboard eraser",
    "toilet brush",
    "spray bottle",
    "headphones",
    "stapler",
    "marker",
]

SCANNETPP_ID_2_NAME = {
    1536: "wall",
    211: "ceiling",
    533: "floor",
    1398: "table",
    399: "door",
    210: "ceiling lamp",
    160: "cabinet",
    114: "blinds",
    340: "curtain",
    230: "chair",
    1359: "storage cabinet",
    911: "office chair",
    126: "bookshelf",
    1599: "whiteboard",
    1610: "window",
    138: "box",
    1612: "window frame",
    873: "monitor",
    1219: "shelf",
    400: "doorframe",
    1033: "pipe",
    670: "heater",
    726: "kitchen cabinet",
    1305: "sofa",
    1618: "windowsill",
    80: "bed",
    1268: "shower wall",
    1486: "trash can",
    123: "book",
    1040: "plant",
    37: "blanket",
    1504: "tv",
    300: "computer tower",
    732: "kitchen counter",
    1142: "refrigerator",
    707: "jacket",
    464: "electrical duct",
    1276: "sink",
    31: "bag",
    994: "picture",
    1027: "pillow",
    1468: "towel",
    1379: "suitcase",
    28: "backpack",
    331: "crate",
    724: "keyboard",
    1123: "rack",
    1436: "toilet",
    953: "paper",
    1105: "printer",
    1078: "poster",
    941: "painting",
    851: "microwave",
    120: "board",
    1232: "shoes",
    1300: "socket",
    128: "bottle",
    151: "bucket",
    345: "cushion",
    55: "basket",
    1230: "shoe rack",
    1418: "telephone",
    504: "file folder",
    262: "cloth",
    111: "blind rail",
    777: "laptop",
    1041: "plant pot",
    446: "exhaust fan",
    337: "cup",
    280: "coat hanger",
    801: "light switch",
    1311: "speaker",
    1403: "table lamp",
    11: "air vent",
    272: "clothes hanger",
    721: "kettle",
    1292: "smoke detector",
    307: "container",
    1099: "power strip",
    1287: "slippers",
    954: "paper bag",
    886: "mouse",
    348: "cutting board",
    1443: "toilet paper",
    975: "paper towel",
    1081: "pot",
    259: "clock",
    947: "pan",
    1410: "tap",
    710: "jar",
    1298: "soap dispenser",
    104: "binder",
    137: "bowl",
    1428: "tissue box",
    1601: "whiteboard eraser",
    1437: "toilet brush",
    1322: "spray bottle",
    666: "headphones",
    1340: "stapler",
    829: "marker",
}

SCANNETPP_NAME_2_ID = {
    "wall": 1536,
    "ceiling": 211,
    "floor": 533,
    "table": 1398,
    "door": 399,
    "ceiling lamp": 210,
    "cabinet": 160,
    "blinds": 114,
    "curtain": 340,
    "chair": 230,
    "storage cabinet": 1359,
    "office chair": 911,
    "bookshelf": 126,
    "whiteboard": 1599,
    "window": 1610,
    "box": 138,
    "window frame": 1612,
    "monitor": 873,
    "shelf": 1219,
    "doorframe": 400,
    "pipe": 1033,
    "heater": 670,
    "kitchen cabinet": 726,
    "sofa": 1305,
    "windowsill": 1618,
    "bed": 80,
    "shower wall": 1268,
    "trash can": 1486,
    "book": 123,
    "plant": 1040,
    "blanket": 37,
    "tv": 1504,
    "computer tower": 300,
    "kitchen counter": 732,
    "refrigerator": 1142,
    "jacket": 707,
    "electrical duct": 464,
    "sink": 1276,
    "bag": 31,
    "picture": 994,
    "pillow": 1027,
    "towel": 1468,
    "suitcase": 1379,
    "backpack": 28,
    "crate": 331,
    "keyboard": 724,
    "rack": 1123,
    "toilet": 1436,
    "paper": 953,
    "printer": 1105,
    "poster": 1078,
    "painting": 941,
    "microwave": 851,
    "board": 120,
    "shoes": 1232,
    "socket": 1300,
    "bottle": 128,
    "bucket": 151,
    "cushion": 345,
    "basket": 55,
    "shoe rack": 1230,
    "telephone": 1418,
    "file folder": 504,
    "cloth": 262,
    "blind rail": 111,
    "laptop": 777,
    "plant pot": 1041,
    "exhaust fan": 446,
    "cup": 337,
    "coat hanger": 280,
    "light switch": 801,
    "speaker": 1311,
    "table lamp": 1403,
    "air vent": 11,
    "clothes hanger": 272,
    "kettle": 721,
    "smoke detector": 1292,
    "container": 307,
    "power strip": 1099,
    "slippers": 1287,
    "paper bag": 954,
    "mouse": 886,
    "cutting board": 348,
    "toilet paper": 1443,
    "paper towel": 975,
    "pot": 1081,
    "clock": 259,
    "pan": 947,
    "tap": 1410,
    "jar": 710,
    "soap dispenser": 1298,
    "binder": 104,
    "bowl": 137,
    "tissue box": 1428,
    "whiteboard eraser": 1601,
    "toilet brush": 1437,
    "spray bottle": 1322,
    "headphones": 666,
    "stapler": 1340,
    "marker": 829,
}

SCANNETPP_VALID_IDS = [
    1536,
    211,
    533,
    1398,
    399,
    210,
    160,
    114,
    340,
    230,
    1359,
    911,
    126,
    1599,
    1610,
    138,
    1612,
    873,
    1219,
    400,
    1033,
    670,
    726,
    1305,
    1618,
    80,
    1268,
    1486,
    123,
    1040,
    37,
    1504,
    300,
    732,
    1142,
    707,
    464,
    1276,
    31,
    994,
    1027,
    1468,
    1379,
    28,
    331,
    724,
    1123,
    1436,
    953,
    1105,
    1078,
    941,
    851,
    120,
    1232,
    1300,
    128,
    151,
    345,
    55,
    1230,
    1418,
    504,
    262,
    111,
    777,
    1041,
    446,
    337,
    280,
    801,
    1311,
    1403,
    11,
    272,
    721,
    1292,
    307,
    1099,
    1287,
    954,
    886,
    348,
    1443,
    975,
    1081,
    259,
    947,
    1410,
    710,
    1298,
    104,
    137,
    1428,
    1601,
    1437,
    1322,
    666,
    1340,
    829,
]

SCANNETPP_ID_2_COMPACT_ID = {
    1536: 0,
    211: 1,
    533: 2,
    1398: 3,
    399: 4,
    210: 5,
    160: 6,
    114: 7,
    340: 8,
    230: 9,
    1359: 10,
    911: 11,
    126: 12,
    1599: 13,
    1610: 14,
    138: 15,
    1612: 16,
    873: 17,
    1219: 18,
    400: 19,
    1033: 20,
    670: 21,
    726: 22,
    1305: 23,
    1618: 24,
    80: 25,
    1268: 26,
    1486: 27,
    123: 28,
    1040: 29,
    37: 30,
    1504: 31,
    300: 32,
    732: 33,
    1142: 34,
    707: 35,
    464: 36,
    1276: 37,
    31: 38,
    994: 39,
    1027: 40,
    1468: 41,
    1379: 42,
    28: 43,
    331: 44,
    724: 45,
    1123: 46,
    1436: 47,
    953: 48,
    1105: 49,
    1078: 50,
    941: 51,
    851: 52,
    120: 53,
    1232: 54,
    1300: 55,
    128: 56,
    151: 57,
    345: 58,
    55: 59,
    1230: 60,
    1418: 61,
    504: 62,
    262: 63,
    111: 64,
    777: 65,
    1041: 66,
    446: 67,
    337: 68,
    280: 69,
    801: 70,
    1311: 71,
    1403: 72,
    11: 73,
    272: 74,
    721: 75,
    1292: 76,
    307: 77,
    1099: 78,
    1287: 79,
    954: 80,
    886: 81,
    348: 82,
    1443: 83,
    975: 84,
    1081: 85,
    259: 86,
    947: 87,
    1410: 88,
    710: 89,
    1298: 90,
    104: 91,
    137: 92,
    1428: 93,
    1601: 94,
    1437: 95,
    1322: 96,
    666: 97,
    1340: 98,
    829: 99,
}


TRAIN_SPLITS = {
    "02a980c994",
    "036bce3393",
    "03f7a0e617",
    "047fb766c4",
    "076c822ecc",
    "079a326597",
    "07f5b601ee",
    "07ff1c45bb",
    "08bbbdcc3d",
    "09bced689e",
    "09c1414f1b",
    "0a184cf634",
    "0a5c013435",
    "0a7cc12c0e",
    "0b031f3119",
    "0cf2e9402d",
    "0d2ee665be",
    "0e75f3c4d9",
    "104acbf7d2",
    "108ec0b806",
    "116456116b",
    "11b696efba",
    "1204e08f17",
    "124974734e",
    "13285009a4",
    "1366d5ae89",
    "13c3e046d7",
    "15155a88fb",
    "1831b3823a",
    "1841a0b525",
    "1a130d092a",
    "1a8e0d78c0",
    "1ada7a0617",
    "1ae9e5d2a6",
    "1b75758486",
    "1b9692f0c7",
    "1c4b893630",
    "1c876c250f",
    "1d003b07bd",
    "1f7cbbdde1",
    "210f741378",
    "21d970d8de",
    "251443268c",
    "252652d5ba",
    "25927bb04c",
    "25f3b7a318",
    "260db9cf5a",
    "260fa55d50",
    "27dd4da69e",
    "280b83fcf3",
    "281ba69af1",
    "281bc17764",
    "286b55a2bf",
    "28a9ee4557",
    "2970e95b65",
    "2a496183e1",
    "2b1dc6d6a5",
    "2e74812d00",
    "302a7f6b67",
    "303745abc7",
    "30966f4c6e",
    "30f4a2b44d",
    "319787e6ec",
    "31a2c91c43",
    "320c3af000",
    "324d07a5b3",
    "355e5e32db",
    "37ea1c52f0",
    "3864514494",
    "38d58a7a31",
    "3928249b53",
    "394a542a19",
    "39e6ee46df",
    "3db0a1c8f3",
    "3e8bba0176",
    "3e928dc2f6",
    "3f15a9266d",
    "3f1e1610de",
    "40aec5fffa",
    "40b56bf310",
    "419cbe7c11",
    "4318f8bb3c",
    "4422722c49",
    "45b0dac5e3",
    "471cc4ba84",
    "47b37eb6f9",
    "480ddaadc0",
    "484ad681df",
    "49a82360aa",
    "4a1a3a7dc5",
    "4ba22fa7e4",
    "4bc04e0cde",
    "4c5c60fa76",
    "4ea827f5a1",
    "50809ea0d8",
    "52599ae063",
    "5298ec174f",
    "54e7ffaea3",
    "55b2bf8036",
    "5654092cc2",
    "56a0ec536c",
    "5748ce6f01",
    "578511c8a9",
    "5942004064",
    "5a14f9da39",
    "5a269ba6fe",
    "5d152fab1b",
    "5eb31827b7",
    "5f99900f09",
    "5fb5d2dbf2",
    "6115eddb86",
    "61adeff7d5",
    "633f9a9f06",
    "646af5e14b",
    "64ea6b73c2",
    "651dc6b4f1",
    "6855e1ac32",
    "689fec23d7",
    "6b40d1a939",
    "6cc2231b9c",
    "6d89a7320d",
    "6ee2fc1070",
    "6f1848d1e3",
    "7079b59642",
    "709ab5bffe",
    "712dc47104",
    "74ff105c0d",
    "75d29d69b8",
    "77596f5d2a",
    "7831862f02",
    "7977624358",
    "7b37cccb03",
    "7b6477cb95",
    "7bc286c1b6",
    "7d72f01865",
    "7e09430da7",
    "7e7cd69a59",
    "7eac902fd5",
    "7f4d173c9c",
    "80ffca8a48",
    "8133208cb6",
    "825d228aec",
    "8283161f1b",
    "84b48f2614",
    "85251de7d1",
    "87f6d7d564",
    "88627b561e",
    "8890d0a267",
    "89214f3ca0",
    "893fb90e89",
    "8a20d62ac0",
    "8a35ef3cfe",
    "8b2c0938d6",
    "8b5caf3398",
    "8be0cd3817",
    "8e00ac7f59",
    "8e6ff28354",
    "8f82c394d6",
    "9460c8889d",
    "9471b8d485",
    "94ee15e8ba",
    "95d525fbfd",
    "961911d451",
    "9859de300f",
    "98b4ec142f",
    "98fe276aa8",
    "99fa5c25e1",
    "9b365a9b68",
    "9b74afd2d2",
    "9f139a318d",
    "9f21bdec45",
    "a003a6585e",
    "a05ee63164",
    "a08dda47a8",
    "a1d9da703c",
    "a24f64f7fb",
    "a29cccc784",
    "a46b21d949",
    "a4e227f506",
    "a5114ca13d",
    "a8bf42d646",
    "a980334473",
    "aaa11940d3",
    "ab046f8faf",
    "ab11145646",
    "ab6983ae6c",
    "ac48a9b736",
    "acd69a1746",
    "ad2d07fd11",
    "ada5304e41",
    "b074ca565a",
    "b09431c547",
    "b0a08200c9",
    "b1d75ecd55",
    "b20a261fdf",
    "b5918e4637",
    "b73f5cdc41",
    "bb87c292ad",
    "bc03d88fc3",
    "bc2fce1d81",
    "bc400d86e1",
    "bcd2436daf",
    "bd9305480d",
    "be0ed6b33c",
    "be91f7884d",
    "beb802368c",
    "bee11d6a41",
    "bf6e439e38",
    "bfd3fd54d2",
    "c06a983e63",
    "c0c863b72d",
    "c0cbb1fea1",
    "c0f5742640",
    "c173f62b15",
    "c24f94007b",
    "c3e279be54",
    "c47168fab2",
    "c49a8c6cff",
    "c4c04e6d6c",
    "c50d2d1d42",
    "c5439f4607",
    "c545851c4f",
    "c5f701a8c7",
    "c8f2218ee2",
    "c9bf4c8b62",
    "cbd4b3055e",
    "cc5237fd77",
    "ccdc33dc2a",
    "ccfd3ed9c7",
    "cd7973d92b",
    "cf1ffd871d",
    "d228e2d9dd",
    "d2f44bf242",
    "d415cc449b",
    "d4d2019f5d",
    "d6702c681d",
    "d6cbe4b28b",
    "d6d9ddb03f",
    "d755b3d9d8",
    "d7abfc4b17",
    "d918af9c5f",
    "daffc70503",
    "dc263dfbf0",
    "dfac5b38df",
    "dfe9cbd72a",
    "e01b287af5",
    "e050c15a8d",
    "e0abd740ba",
    "e0de253456",
    "e0e83b4ca3",
    "e1b1d9de55",
    "e398684d27",
    "e3ecd49e2b",
    "e7af285f7d",
    "e898c76c1f",
    "e8e81396b6",
    "e8ea9b4da8",
    "e91722b5a3",
    "e9ac2fc517",
    "eb4bc76767",
    "ebc200e928",
    "ebff4de90b",
    "ef69d58016",
    "f00bd5fa8a",
    "f07340dfea",
    "f20e7b5640",
    "f248c2bcdc",
    "f25f5e6f63",
    "f2dc06b1d2",
    "f34d532901",
    "f3685d06a9",
    "f3d64c30f8",
    "f6659a3107",
    "f8062cb7ce",
    "f8f12e4e6b",
    "f9f95681fd",
    "fb05e13ad1",
    "fb5a96b1a2",
    "fe1733741f",
    "fe94fc30cf",
}

VAL_SPLITS = {
    "0a76e06478",
    "16c9bd2e1e",
    "290ef3f2c9",
    "32280ecbca",
    "39f36da05b",
    "3c95c89d61",
    "410c470782",
    "41b00feddb",
    "45d2e33be1",
    "49c758655e",
    "54b6127146",
    "5656608266",
    "59e3f1ea37",
    "5ee7c22ba0",
    "6464461276",
    "66c98f4a9b",
    "67d702f2e8",
    "69e5939669",
    "785e7504b9",
    "7cd2ac43b4",
    "824d9cfa6e",
    "88cf747085",
    "8d563fc2cc",
    "9071e139d9",
    "9a9e32c768",
    "9e019d8be1",
    "9f79564dbf",
    "a08d9a2476",
    "acd95847c5",
    "b08a908f0f",
    "b26e64c4b0",
    "b97261909e",
    "bd7375297e",
    "bde1e479ad",
    "c413b34238",
    "c856c41c99",
    "c9abde4c4b",
    "ca0e09014e",
    "d1b9dff904",
    "d6419f6478",
    "e7ac609391",
    "e9e16b6043",
    "ecb5d01065",
    "ed2216380b",
    "ef18cf0708",
    "ef25276c25",
    "f0b0a42ba3",
    "f5401524e5",
    "faec2f0468",
    "fd361ab85f",
}

TEST_SPLITS = {
    "02455b3d20",
    "0529d56cce",
    "06a3d79b68",
    "154c3e10d9",
    "18fd041970",
    "1be2c31cac",
    "21532e059d",
    "285efbc7cf",
    "29b607c6d5",
    "2a1a3afad9",
    "2e67a32314",
    "3a161a857d",
    "3e6ceea56c",
    "47eb87b5bb",
    "497588b572",
    "4ef75031e3",
    "5371eff4f9",
    "54bca9597e",
    "569f99f881",
    "68739bdf1f",
    "6ebe30292e",
    "6f12492455",
    "728daff2a3",
    "7dfdff1b7d",
    "7ffc86edf4",
    "954633ea01",
    "9663292843",
    "9f7641ce94",
    "a24858e51e",
    "a897272241",
    "aa6e508f0c",
    "ab252b28c0",
    "accad58571",
    "b09b119466",
    "ba414a3e6f",
    "be2e10f16a",
    "be6205d016",
    "be66c57b92",
    "cc49215f67",
    "cd2994fcc1",
    "cd88899edb",
    "d070e22e3b",
    "d662592b54",
    "da8043d54e",
    "dffce1cf9a",
    "e6afbe3753",
    "ea15f3457c",
    "eeddfe67f5",
    "f7a60ba2a2",
    "f94c225e84",
}

IGNORE_INDEX = -1


def read_plypcd(filepath):
    with open(filepath, "rb") as f:
        plydata = plyfile.PlyData.read(f)

    if plydata.elements:
        data = plydata.elements[0].data
        coords = np.array([data["x"], data["y"], data["z"]], dtype=np.float32).T

        colors = None
        if ({"red", "green", "blue"} - set(data.dtype.names)) == set():
            colors = np.array([data["red"], data["green"], data["blue"]], dtype=np.uint8).T

        o3d_plydata = o3d.io.read_triangle_mesh(filepath)
        if not o3d_plydata.has_vertex_normals():
            o3d_plydata.compute_vertex_normals()
        normals = np.asarray(o3d_plydata.vertex_normals)

        return coords, colors, normals


def get_scannetpp_compact_mapping():
    class2id = np.array(SCANNETPP_VALID_IDS).astype(int)
    id2class = np.array([IGNORE_INDEX] * (10000 + 1)).astype(int)
    for class_, id_ in enumerate(SCANNETPP_VALID_IDS):
        id2class[id_] = class_

    return class2id, id2class


def read_semantic_labels(filepath):
    with open(filepath, "rb") as f:
        plydata = plyfile.PlyData.read(f)

    if plydata.elements:
        data = plydata.elements[0].data

        labels = None
        if ({"label"} - set(data.dtype.names)) == set():
            labels = np.array(data["label"]).astype(int)
        return labels


def handle_process(
    scene_dir: str,
    output_path: str,
    id2compactid: np.ndarray,
    test: bool,
):
    scene_dir = Path(scene_dir)

    print(f"Processing: {scene_dir.name}")

    coords, colors, normals = read_plypcd(str(scene_dir / "scans/mesh_aligned_0.05.ply"))
    save_dict = dict(
        coord=coords,
        color=colors,
        scene_id=scene_dir.name,
        normal=normals,
    )

    if not test:
        scannetpp_labels = read_semantic_labels(str(scene_dir / "scans/mesh_aligned_0.05_semantic.ply"))
        save_dict["semantic_gt"] = id2compactid[scannetpp_labels]

    torch.save(save_dict, output_path)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--dataset_root",
        required=True,
        help="Path to the ScanNet++ dataset containing data folders",
    )
    parser.add_argument(
        "--output_root",
        required=True,
        help="Output path where train/val folders will be located",
    )
    parser.add_argument(
        "--num_cpu",
        type=int,
        default=4,
        help="number of cores used",
    )
    config = parser.parse_args()

    # Create output directories
    train_output_dir = os.path.join(config.output_root, "train")
    os.makedirs(train_output_dir, exist_ok=True)
    val_output_dir = os.path.join(config.output_root, "val")
    os.makedirs(val_output_dir, exist_ok=True)
    test_output_dir = os.path.join(config.output_root, "test")
    os.makedirs(test_output_dir, exist_ok=True)

    # Load label map
    _, id2compactid = get_scannetpp_compact_mapping()
    scene_dirs = []
    output_paths = []
    is_test = []

    # print(id2compactid.dtype, id2compactid)
    # assert False

    scans_folder = Path(config.dataset_root) / "data"
    scan_names = os.listdir(str(scans_folder))
    for scan_id in tqdm(scan_names):
        file_path = scans_folder / scan_id / "scans/mesh_aligned_0.05.ply"
        if file_path.exists():
            scene_dirs.append(str(scans_folder / scan_id))

            split = None
            if scan_id in TRAIN_SPLITS:
                split = "train"
                is_test.append(False)
            elif scan_id in VAL_SPLITS:
                split = "val"
                is_test.append(False)
            elif scan_id in TEST_SPLITS:
                split = "test"
                is_test.append(True)
            else:
                raise ValueError

            output_paths.append(str(Path(config.output_root) / split / f"{scan_id}.pth"))

    # Preprocess data.
    print("Processing scenes...")
    num_cpu = min(config.num_cpu, mp.cpu_count())
    pool = ProcessPoolExecutor(max_workers=num_cpu)
    print(f"Using {num_cpu} cores")
    # pool = ProcessPoolExecutor(max_workers=1)
    _ = list(
        pool.map(
            handle_process,
            scene_dirs,
            output_paths,
            repeat(id2compactid),
            is_test,
        )
    )
